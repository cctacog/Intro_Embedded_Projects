
Lab3_PinIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000236  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af9  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d9  00000000  00000000  00000e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b4  00000000  00000000  0000183e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f5  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000158  00000000  00000000  0000218d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000022e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e3       	ldi	r30, 0x36	; 54
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 12 01 	call	0x224	; 0x224 <main>
  da:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <init_IO>:
#include <avr/io.h>
#include <avr/delay.h>

void init_IO(void)
{
	DDRD |= (1 << DDD4)|(1 << DDD5)|(1 << DDD6)|(1 << DDD7);//SET PORT D TO OUTPUT
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	80 6f       	ori	r24, 0xF0	; 240
  e6:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1 << DDB0)|~(1 << DDB1)|~(1 << DDB2)|~(1 << DDB3);//SET PORT B TO INPUT [PIN]
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB0)|(1 << PORTB1)|(1 << PORTB2)|(1 << PORTB3);//SET PIN B TO PULL UP RESISTOR	
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	8f 60       	ori	r24, 0x0F	; 15
  f0:	85 b9       	out	0x05, r24	; 5
	
	//PRESET THE OUTPUTS ALL AS HIGH
	PIND |= (1 << 4)|(1 << 5)|(1 << 6)|(1 << 7);
  f2:	89 b1       	in	r24, 0x09	; 9
  f4:	80 6f       	ori	r24, 0xF0	; 240
  f6:	89 b9       	out	0x09, r24	; 9
  f8:	08 95       	ret

000000fa <init_USART>:
}

void init_USART(void)
{
	//Set baud rate 
	UBRR0H = 0;
  fa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUDRATE;
  fe:	87 e6       	ldi	r24, 0x67	; 103
 100:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//Enable receiver and transmitter 
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 104:	88 e1       	ldi	r24, 0x18	; 24
 106:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Set frame format: 8 data, default 1 stop bit
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01); 
 10a:	e2 ec       	ldi	r30, 0xC2	; 194
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	86 60       	ori	r24, 0x06	; 6
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <transmit>:
	*/
}

void transmit(uint8_t data)
{
	while (!( UCSR0A & (1<<UDRE0)));
 116:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11a:	95 ff       	sbrs	r25, 5
 11c:	fc cf       	rjmp	.-8      	; 0x116 <transmit>
	//until bit 5 of UCSR0A[7:0] is 1 such as UDRE0 means the data register is empty
	//gives ability to send info without mixing with previous info sent/sending
	UDR0 = data;
 11e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 122:	08 95       	ret

00000124 <keyPadScan>:

}

void keyPadScan(void)
{
 124:	8f 92       	push	r8
 126:	9f 92       	push	r9
 128:	af 92       	push	r10
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	60 97       	sbiw	r28, 0x10	; 16
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
	uint8_t keyPad[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};
 14a:	80 e1       	ldi	r24, 0x10	; 16
 14c:	e0 e0       	ldi	r30, 0x00	; 0
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	de 01       	movw	r26, r28
 152:	11 96       	adiw	r26, 0x01	; 1
 154:	01 90       	ld	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	8a 95       	dec	r24
 15a:	e1 f7       	brne	.-8      	; 0x154 <keyPadScan+0x30>
	/*
		2d array representing the keypad configuration
	*/
	for(uint8_t i = 4; i < 8; ++i)//loop through each row as PORTD4-7 (four total)
 15c:	68 94       	set
 15e:	aa 24       	eor	r10, r10
 160:	a2 f8       	bld	r10, 2
 162:	4a c0       	rjmp	.+148    	; 0x1f8 <keyPadScan+0xd4>
	{
		//turning off the output to the keypad at row i
		PORTD &= ~(1 << i);
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	ea 2c       	mov	r14, r10
 168:	f1 2c       	mov	r15, r1
 16a:	01 e0       	ldi	r16, 0x01	; 1
 16c:	10 e0       	ldi	r17, 0x00	; 0
 16e:	48 01       	movw	r8, r16
 170:	0a 2c       	mov	r0, r10
 172:	02 c0       	rjmp	.+4      	; 0x178 <keyPadScan+0x54>
 174:	88 0c       	add	r8, r8
 176:	99 1c       	adc	r9, r9
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <keyPadScan+0x50>
 17c:	98 2d       	mov	r25, r8
 17e:	90 95       	com	r25
 180:	89 23       	and	r24, r25
 182:	8b b9       	out	0x0b, r24	; 11
		for(uint8_t j = 0; j < 4; ++j)//loop through each column PORTB0-3 (four total)
 184:	10 e0       	ldi	r17, 0x00	; 0
 186:	31 c0       	rjmp	.+98     	; 0x1ea <keyPadScan+0xc6>
		{									
			if(!(PINB & (1 << j)))//if there is a short of a row then the input will be 0
 188:	83 b1       	in	r24, 0x03	; 3
 18a:	c1 2e       	mov	r12, r17
 18c:	d1 2c       	mov	r13, r1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 2e       	mov	r0, r17
 192:	02 c0       	rjmp	.+4      	; 0x198 <keyPadScan+0x74>
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <keyPadScan+0x70>
 19c:	80 fd       	sbrc	r24, 0
 19e:	24 c0       	rjmp	.+72     	; 0x1e8 <keyPadScan+0xc4>
			{
				transmit(keyPad[i-4][j]);//transmit the character from the array through TX
 1a0:	f7 01       	movw	r30, r14
 1a2:	34 97       	sbiw	r30, 0x04	; 4
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	8c 0f       	add	r24, r28
 1b2:	9d 1f       	adc	r25, r29
 1b4:	e8 0f       	add	r30, r24
 1b6:	f9 1f       	adc	r31, r25
 1b8:	ec 0d       	add	r30, r12
 1ba:	fd 1d       	adc	r31, r13
 1bc:	80 81       	ld	r24, Z
 1be:	0e 94 8b 00 	call	0x116	; 0x116 <transmit>
				while(!(PINB & (1 << j)));//while the input is being shorted to 0 then stay in if-statement
 1c2:	83 b1       	in	r24, 0x03	; 3
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0c 2c       	mov	r0, r12
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <keyPadScan+0xaa>
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <keyPadScan+0xa6>
 1d2:	80 ff       	sbrs	r24, 0
 1d4:	f6 cf       	rjmp	.-20     	; 0x1c2 <keyPadScan+0x9e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	9f ef       	ldi	r25, 0xFF	; 255
 1d8:	20 e7       	ldi	r18, 0x70	; 112
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	91 50       	subi	r25, 0x01	; 1
 1de:	20 40       	sbci	r18, 0x00	; 0
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <keyPadScan+0xb8>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <keyPadScan+0xc2>
 1e6:	00 00       	nop
	*/
	for(uint8_t i = 4; i < 8; ++i)//loop through each row as PORTD4-7 (four total)
	{
		//turning off the output to the keypad at row i
		PORTD &= ~(1 << i);
		for(uint8_t j = 0; j < 4; ++j)//loop through each column PORTB0-3 (four total)
 1e8:	1f 5f       	subi	r17, 0xFF	; 255
 1ea:	14 30       	cpi	r17, 0x04	; 4
 1ec:	68 f2       	brcs	.-102    	; 0x188 <keyPadScan+0x64>
				transmit(keyPad[i-4][j]);//transmit the character from the array through TX
				while(!(PINB & (1 << j)));//while the input is being shorted to 0 then stay in if-statement
				_delay_ms(50);//de-bounce delay of max 50 milliseconds
			}
		}
		PORTD |= (1 << i);//return the output of 1 to current row 
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	08 2f       	mov	r16, r24
 1f2:	08 29       	or	r16, r8
 1f4:	0b b9       	out	0x0b, r16	; 11
{
	uint8_t keyPad[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};
	/*
		2d array representing the keypad configuration
	*/
	for(uint8_t i = 4; i < 8; ++i)//loop through each row as PORTD4-7 (four total)
 1f6:	a3 94       	inc	r10
 1f8:	97 e0       	ldi	r25, 0x07	; 7
 1fa:	9a 15       	cp	r25, r10
 1fc:	08 f0       	brcs	.+2      	; 0x200 <keyPadScan+0xdc>
 1fe:	b2 cf       	rjmp	.-156    	; 0x164 <keyPadScan+0x40>
				_delay_ms(50);//de-bounce delay of max 50 milliseconds
			}
		}
		PORTD |= (1 << i);//return the output of 1 to current row 
	}
}
 200:	60 96       	adiw	r28, 0x10	; 16
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	df 90       	pop	r13
 21a:	cf 90       	pop	r12
 21c:	af 90       	pop	r10
 21e:	9f 90       	pop	r9
 220:	8f 90       	pop	r8
 222:	08 95       	ret

00000224 <main>:

int main(void)
{
	init_IO();//initialization method
 224:	0e 94 71 00 	call	0xe2	; 0xe2 <init_IO>
	init_USART();//uart initialization
 228:	0e 94 7d 00 	call	0xfa	; 0xfa <init_USART>
    while (1) 
    {
		keyPadScan();//loop through the keypad 2d array 
 22c:	0e 94 92 00 	call	0x124	; 0x124 <keyPadScan>
 230:	fd cf       	rjmp	.-6      	; 0x22c <main+0x8>

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
