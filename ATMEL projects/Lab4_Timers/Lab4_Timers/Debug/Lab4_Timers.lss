
Lab4_Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b0  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fd  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fd  00000000  00000000  000014f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000486  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  c4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <init_Timer>:
#define F_CPU 16000000
#include <avr/io.h>

void init_Timer(void)
{
	TCCR0A |= (1 << WGM01); // Set the Timer Mode to CTC
  cc:	84 b5       	in	r24, 0x24	; 36
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	84 bd       	out	0x24, r24	; 36
		for 10m
			OCR0A = 256 * 10m / 16.384m = 156.25
			** rounding down ** -> 156
			156d = 0x9C
	*/
	OCR0A = 0x9C; // Set the value that you want to count to
  d2:	8c e9       	ldi	r24, 0x9C	; 156
  d4:	87 bd       	out	0x27, r24	; 39
	// set pre scaler to 1024 and start the timer to have the max be 10ms 
	TCCR0B |= (1 << CS02) | (1 << CS00);
  d6:	85 b5       	in	r24, 0x25	; 37
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	85 bd       	out	0x25, r24	; 37
	OCR0B = 0;
  dc:	18 bc       	out	0x28, r1	; 40
  de:	08 95       	ret

000000e0 <timer_loop>:
	//to set default ocr0b at 0 bc button never pressed 
}

void timer_loop()
{
	if(!(PINB & (1 << 7)) && OCR0B < OCR0A)//if the button is activated and not max (OCR0A) value not reached
  e0:	1f 99       	sbic	0x03, 7	; 3
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <timer_loop+0x14>
  e4:	98 b5       	in	r25, 0x28	; 40
  e6:	87 b5       	in	r24, 0x27	; 39
  e8:	98 17       	cp	r25, r24
  ea:	20 f4       	brcc	.+8      	; 0xf4 <timer_loop+0x14>
		++OCR0B;//aggregate to the 0CR0B until it is equal to
  ec:	88 b5       	in	r24, 0x28	; 40
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	88 bd       	out	0x28, r24	; 40
  f2:	08 c0       	rjmp	.+16     	; 0x104 <timer_loop+0x24>
	else if((PINB & (1 << 7)) && OCR0B > 0)
  f4:	1f 9b       	sbis	0x03, 7	; 3
  f6:	06 c0       	rjmp	.+12     	; 0x104 <timer_loop+0x24>
  f8:	88 b5       	in	r24, 0x28	; 40
  fa:	88 23       	and	r24, r24
  fc:	19 f0       	breq	.+6      	; 0x104 <timer_loop+0x24>
		--OCR0B;//decrease from OCR0B if the button deactivated and not value 0
  fe:	88 b5       	in	r24, 0x28	; 40
 100:	81 50       	subi	r24, 0x01	; 1
 102:	88 bd       	out	0x28, r24	; 40
	if(OCR0B != 0)
 104:	88 b5       	in	r24, 0x28	; 40
 106:	88 23       	and	r24, r24
 108:	19 f0       	breq	.+6      	; 0x110 <timer_loop+0x30>
		PORTB |= (1 << PORTB5);//turn LED ON//until point b reached do not continue	
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	85 b9       	out	0x05, r24	; 5
	while(!(TIFR0 & (1 << OCF0B)));
 110:	aa 9b       	sbis	0x15, 2	; 21
 112:	fe cf       	rjmp	.-4      	; 0x110 <timer_loop+0x30>
	if(OCR0B != OCR0A)
 114:	98 b5       	in	r25, 0x28	; 40
 116:	87 b5       	in	r24, 0x27	; 39
 118:	98 17       	cp	r25, r24
 11a:	19 f0       	breq	.+6      	; 0x122 <timer_loop+0x42>
		PORTB &= ~(1 << PORTB5);//turn LED OFF
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	85 b9       	out	0x05, r24	; 5
	TIFR0 |= (1 << OCF0B);//reset TIFR0 
 122:	85 b3       	in	r24, 0x15	; 21
 124:	84 60       	ori	r24, 0x04	; 4
 126:	85 bb       	out	0x15, r24	; 21
	while(!(TIFR0 & (1 << OCF0A)));//until the top point reached do not continue
 128:	a9 9b       	sbis	0x15, 1	; 21
 12a:	fe cf       	rjmp	.-4      	; 0x128 <timer_loop+0x48>
	TIFR0 |= (1 << OCF0A);//reset OCR0A
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	85 bb       	out	0x15, r24	; 21
 132:	08 95       	ret

00000134 <main>:
}


int main(void)
{
	init_Timer();//initialize the timer CTC and default OCR0A and OCR0B
 134:	0e 94 66 00 	call	0xcc	; 0xcc <init_Timer>
	DDRB |= (1 << DDB5) | ~(1 << DDB7); // set the LED to OUTPUT and switch to INPUT
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	8f 67       	ori	r24, 0x7F	; 127
 13c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB5);//turn LED OFF
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	8f 7d       	andi	r24, 0xDF	; 223
 142:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		timer_loop();//go through the 10ms timer
 144:	0e 94 70 00 	call	0xe0	; 0xe0 <timer_loop>
 148:	fd cf       	rjmp	.-6      	; 0x144 <main+0x10>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
