
Lab1_MorseCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000390  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080011e  0080011e  00000442  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c61  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a12  00000000  00000000  00001155  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  00001b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053b  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036f  00000000  00000000  0000252b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e9       	ldi	r30, 0x90	; 144
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 31       	cpi	r26, 0x1E	; 30
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e1       	ldi	r26, 0x1E	; 30
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 31       	cpi	r26, 0x1F	; 31
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
  ea:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <delay_ms_var>:
	function initialized in order for there to be a variable 
	parameterized delay; current _delay_ms(int time) 
	included library function unable to take in a variable 
	time to output
*/
	while(0 < delay_t)
  f2:	07 c0       	rjmp	.+14     	; 0x102 <delay_ms_var+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	ef e3       	ldi	r30, 0x3F	; 63
  f6:	fc e9       	ldi	r31, 0x9C	; 156
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <delay_ms_var+0x6>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <delay_ms_var+0xc>
  fe:	00 00       	nop
	{
		_delay_ms(10);	//delay in batches of 10 seconds 
		delay_t -= 10;	//per round 10 seconds taken from input
 100:	8a 50       	subi	r24, 0x0A	; 10
	function initialized in order for there to be a variable 
	parameterized delay; current _delay_ms(int time) 
	included library function unable to take in a variable 
	time to output
*/
	while(0 < delay_t)
 102:	81 11       	cpse	r24, r1
 104:	f7 cf       	rjmp	.-18     	; 0xf4 <delay_ms_var+0x2>
	{
		_delay_ms(10);	//delay in batches of 10 seconds 
		delay_t -= 10;	//per round 10 seconds taken from input
	}
}
 106:	08 95       	ret

00000108 <display>:

void display(const uint16_t time)
{	
	PORTB |= (1<<PORTB5); //Set port bit B5 to 1 to turn on the LED
 108:	95 b1       	in	r25, 0x05	; 5
 10a:	90 62       	ori	r25, 0x20	; 32
 10c:	95 b9       	out	0x05, r25	; 5
	delay_ms_var(time); //delay based on input time; 200 ms if dot; 600 ms if dash
 10e:	0e 94 79 00 	call	0xf2	; 0xf2 <delay_ms_var>
	PORTB &= ~(1<<PORTB5); //Clear port bit B5 to 0 to turn off the LED
 112:	85 b1       	in	r24, 0x05	; 5
 114:	8f 7d       	andi	r24, 0xDF	; 223
 116:	85 b9       	out	0x05, r24	; 5
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	83 ec       	ldi	r24, 0xC3	; 195
 11c:	99 e0       	ldi	r25, 0x09	; 9
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <display+0x16>
 126:	00 c0       	rjmp	.+0      	; 0x128 <display+0x20>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <letter_val>:
	_delay_ms(200); //delay : 200ms
}

int letter_val(const uint16_t val)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	c0 58       	subi	r28, 0x80	; 128
 136:	d1 09       	sbc	r29, r1
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
/*
	match the character with their Morse code value either:
		octal value equivalent ['A'-'Z', '0'-'9']
*/
	uint16_t ret_val = val;
	volatile uint16_t alphabet[27] = {A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z};
 142:	fe 01       	movw	r30, r28
 144:	e5 5b       	subi	r30, 0xB5	; 181
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	26 e3       	ldi	r18, 0x36	; 54
 14a:	df 01       	movw	r26, r30
 14c:	1d 92       	st	X+, r1
 14e:	2a 95       	dec	r18
 150:	e9 f7       	brne	.-6      	; 0x14c <letter_val+0x20>
 152:	29 e1       	ldi	r18, 0x19	; 25
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	31 83       	std	Z+1, r19	; 0x01
 158:	20 83       	st	Z, r18
 15a:	2b e4       	ldi	r18, 0x4B	; 75
 15c:	32 e0       	ldi	r19, 0x02	; 2
 15e:	33 83       	std	Z+3, r19	; 0x03
 160:	22 83       	std	Z+2, r18	; 0x02
 162:	2b ec       	ldi	r18, 0xCB	; 203
 164:	32 e0       	ldi	r19, 0x02	; 2
 166:	35 83       	std	Z+5, r19	; 0x05
 168:	24 83       	std	Z+4, r18	; 0x04
 16a:	2b e4       	ldi	r18, 0x4B	; 75
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	37 83       	std	Z+7, r19	; 0x07
 170:	26 83       	std	Z+6, r18	; 0x06
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	31 87       	std	Z+9, r19	; 0x09
 178:	20 87       	std	Z+8, r18	; 0x08
 17a:	29 ec       	ldi	r18, 0xC9	; 201
 17c:	32 e0       	ldi	r19, 0x02	; 2
 17e:	33 87       	std	Z+11, r19	; 0x0b
 180:	22 87       	std	Z+10, r18	; 0x0a
 182:	2b e5       	ldi	r18, 0x5B	; 91
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	35 87       	std	Z+13, r19	; 0x0d
 188:	24 87       	std	Z+12, r18	; 0x0c
 18a:	29 e4       	ldi	r18, 0x49	; 73
 18c:	32 e0       	ldi	r19, 0x02	; 2
 18e:	37 87       	std	Z+15, r19	; 0x0f
 190:	26 87       	std	Z+14, r18	; 0x0e
 192:	29 e0       	ldi	r18, 0x09	; 9
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	31 8b       	std	Z+17, r19	; 0x11
 198:	20 8b       	std	Z+16, r18	; 0x10
 19a:	29 ed       	ldi	r18, 0xD9	; 217
 19c:	36 e0       	ldi	r19, 0x06	; 6
 19e:	33 8b       	std	Z+19, r19	; 0x13
 1a0:	22 8b       	std	Z+18, r18	; 0x12
 1a2:	2b ec       	ldi	r18, 0xCB	; 203
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	35 8b       	std	Z+21, r19	; 0x15
 1a8:	24 8b       	std	Z+20, r18	; 0x14
 1aa:	29 e5       	ldi	r18, 0x59	; 89
 1ac:	32 e0       	ldi	r19, 0x02	; 2
 1ae:	37 8b       	std	Z+23, r19	; 0x17
 1b0:	26 8b       	std	Z+22, r18	; 0x16
 1b2:	2b e1       	ldi	r18, 0x1B	; 27
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	31 8f       	std	Z+25, r19	; 0x19
 1b8:	20 8f       	std	Z+24, r18	; 0x18
 1ba:	2b e0       	ldi	r18, 0x0B	; 11
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	33 8f       	std	Z+27, r19	; 0x1b
 1c0:	22 8f       	std	Z+26, r18	; 0x1a
 1c2:	2b ed       	ldi	r18, 0xDB	; 219
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	35 8f       	std	Z+29, r19	; 0x1d
 1c8:	24 8f       	std	Z+28, r18	; 0x1c
 1ca:	29 ed       	ldi	r18, 0xD9	; 217
 1cc:	32 e0       	ldi	r19, 0x02	; 2
 1ce:	37 8f       	std	Z+31, r19	; 0x1f
 1d0:	26 8f       	std	Z+30, r18	; 0x1e
 1d2:	2b e5       	ldi	r18, 0x5B	; 91
 1d4:	36 e0       	ldi	r19, 0x06	; 6
 1d6:	31 a3       	std	Z+33, r19	; 0x21
 1d8:	20 a3       	std	Z+32, r18	; 0x20
 1da:	29 e5       	ldi	r18, 0x59	; 89
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	33 a3       	std	Z+35, r19	; 0x23
 1e0:	22 a3       	std	Z+34, r18	; 0x22
 1e2:	29 e4       	ldi	r18, 0x49	; 73
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	35 a3       	std	Z+37, r19	; 0x25
 1e8:	24 a3       	std	Z+36, r18	; 0x24
 1ea:	23 e0       	ldi	r18, 0x03	; 3
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	37 a3       	std	Z+39, r19	; 0x27
 1f0:	26 a3       	std	Z+38, r18	; 0x26
 1f2:	29 ec       	ldi	r18, 0xC9	; 201
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	31 a7       	std	Z+41, r19	; 0x29
 1f8:	20 a7       	std	Z+40, r18	; 0x28
 1fa:	29 e4       	ldi	r18, 0x49	; 73
 1fc:	36 e0       	ldi	r19, 0x06	; 6
 1fe:	33 a7       	std	Z+43, r19	; 0x2b
 200:	22 a7       	std	Z+42, r18	; 0x2a
 202:	29 ed       	ldi	r18, 0xD9	; 217
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	35 a7       	std	Z+45, r19	; 0x2d
 208:	24 a7       	std	Z+44, r18	; 0x2c
 20a:	2b e4       	ldi	r18, 0x4B	; 75
 20c:	36 e0       	ldi	r19, 0x06	; 6
 20e:	37 a7       	std	Z+47, r19	; 0x2f
 210:	26 a7       	std	Z+46, r18	; 0x2e
 212:	2b ec       	ldi	r18, 0xCB	; 203
 214:	36 e0       	ldi	r19, 0x06	; 6
 216:	31 ab       	std	Z+49, r19	; 0x31
 218:	20 ab       	std	Z+48, r18	; 0x30
 21a:	2b e5       	ldi	r18, 0x5B	; 91
 21c:	32 e0       	ldi	r19, 0x02	; 2
 21e:	33 ab       	std	Z+51, r19	; 0x33
 220:	22 ab       	std	Z+50, r18	; 0x32
 222:	26 e3       	ldi	r18, 0x36	; 54
 224:	de 01       	movw	r26, r28
 226:	11 96       	adiw	r26, 0x01	; 1
 228:	01 90       	ld	r0, Z+
 22a:	0d 92       	st	X+, r0
 22c:	2a 95       	dec	r18
 22e:	e1 f7       	brne	.-8      	; 0x228 <letter_val+0xfc>
	volatile uint16_t numbers[10] = {zero, one, two, three, four, five, six, seven, eight, nine};
 230:	24 e1       	ldi	r18, 0x14	; 20
 232:	e0 e0       	ldi	r30, 0x00	; 0
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	de 01       	movw	r26, r28
 238:	d7 96       	adiw	r26, 0x37	; 55
 23a:	01 90       	ld	r0, Z+
 23c:	0d 92       	st	X+, r0
 23e:	2a 95       	dec	r18
 240:	e1 f7       	brne	.-8      	; 0x23a <letter_val+0x10e>
	if(val >= 65)
 242:	81 34       	cpi	r24, 0x41	; 65
 244:	91 05       	cpc	r25, r1
 246:	70 f0       	brcs	.+28     	; 0x264 <letter_val+0x138>
	{
		ret_val = alphabet[val - 65];
 248:	fc 01       	movw	r30, r24
 24a:	e1 54       	subi	r30, 0x41	; 65
 24c:	f1 09       	sbc	r31, r1
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	8c 0f       	add	r24, r28
 258:	9d 1f       	adc	r25, r29
 25a:	e8 0f       	add	r30, r24
 25c:	f9 1f       	adc	r31, r25
 25e:	80 81       	ld	r24, Z
 260:	91 81       	ldd	r25, Z+1	; 0x01
 262:	12 c0       	rjmp	.+36     	; 0x288 <letter_val+0x15c>
	}
	else if(val <= 57 && val != 32)
 264:	8a 33       	cpi	r24, 0x3A	; 58
 266:	91 05       	cpc	r25, r1
 268:	78 f4       	brcc	.+30     	; 0x288 <letter_val+0x15c>
 26a:	80 32       	cpi	r24, 0x20	; 32
 26c:	91 05       	cpc	r25, r1
 26e:	61 f0       	breq	.+24     	; 0x288 <letter_val+0x15c>
	{
		ret_val = numbers[val - 48];
 270:	fc 01       	movw	r30, r24
 272:	f0 97       	sbiw	r30, 0x30	; 48
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	a1 e0       	ldi	r26, 0x01	; 1
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	ac 0f       	add	r26, r28
 27e:	bd 1f       	adc	r27, r29
 280:	ea 0f       	add	r30, r26
 282:	fb 1f       	adc	r31, r27
 284:	86 a9       	ldd	r24, Z+54	; 0x36
 286:	97 a9       	ldd	r25, Z+55	; 0x37
	}
	return ret_val;
}
 288:	c0 58       	subi	r28, 0x80	; 128
 28a:	df 4f       	sbci	r29, 0xFF	; 255
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <space_dot_dash>:

void space_dot_dash(uint16_t val, const uint16_t next)
{
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	1f 92       	push	r1
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8c 01       	movw	r16, r24
 2b0:	7b 01       	movw	r14, r22
	// 'fourBit_sect' that is taken from val in the form of an octal value [0O] equal to [0bBBB]
	if(val == 32) //if next char a space then print space of 1400 time
 2b2:	80 97       	sbiw	r24, 0x20	; 32
 2b4:	d1 f4       	brne	.+52     	; 0x2ea <space_dot_dash+0x4e>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	87 e9       	ldi	r24, 0x97	; 151
 2ba:	9a e3       	ldi	r25, 0x3A	; 58
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <space_dot_dash+0x20>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <space_dot_dash+0x2a>
 2c6:	00 00       	nop
 2c8:	20 c0       	rjmp	.+64     	; 0x30a <space_dot_dash+0x6e>
		return;
	}
	volatile uint8_t threeBit_sect;	
	while(val != 0)	//if val == 00 end loop
	{
		threeBit_sect = val & 07; //isolate LMO of val				
 2ca:	80 2f       	mov	r24, r16
 2cc:	87 70       	andi	r24, 0x07	; 7
 2ce:	89 83       	std	Y+1, r24	; 0x01
		display(200 * threeBit_sect);		
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	28 ec       	ldi	r18, 0xC8	; 200
 2d4:	82 9f       	mul	r24, r18
 2d6:	c0 01       	movw	r24, r0
 2d8:	11 24       	eor	r1, r1
 2da:	0e 94 84 00 	call	0x108	; 0x108 <display>
		// 03 = dash 
		// 01 = dot		
		val = val >> 3;
 2de:	16 95       	lsr	r17
 2e0:	07 95       	ror	r16
 2e2:	16 95       	lsr	r17
 2e4:	07 95       	ror	r16
 2e6:	16 95       	lsr	r17
 2e8:	07 95       	ror	r16
	{
		_delay_ms(1200);
		return;
	}
	volatile uint8_t threeBit_sect;	
	while(val != 0)	//if val == 00 end loop
 2ea:	01 15       	cp	r16, r1
 2ec:	11 05       	cpc	r17, r1
 2ee:	69 f7       	brne	.-38     	; 0x2ca <space_dot_dash+0x2e>
		// 03 = dash 
		// 01 = dot		
		val = val >> 3;
		//go to next hex value until val = 00
	}		
	if(next != 32)	//if the next character in string not space print space of 400 ms
 2f0:	80 e2       	ldi	r24, 0x20	; 32
 2f2:	e8 16       	cp	r14, r24
 2f4:	f1 04       	cpc	r15, r1
 2f6:	49 f0       	breq	.+18     	; 0x30a <space_dot_dash+0x6e>
 2f8:	9f ef       	ldi	r25, 0xFF	; 255
 2fa:	27 e8       	ldi	r18, 0x87	; 135
 2fc:	83 e1       	ldi	r24, 0x13	; 19
 2fe:	91 50       	subi	r25, 0x01	; 1
 300:	20 40       	sbci	r18, 0x00	; 0
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <space_dot_dash+0x62>
 306:	00 c0       	rjmp	.+0      	; 0x308 <space_dot_dash+0x6c>
 308:	00 00       	nop
		_delay_ms(400);	
}
 30a:	0f 90       	pop	r0
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	ff 90       	pop	r15
 316:	ef 90       	pop	r14
 318:	08 95       	ret

0000031a <main>:

int main(void)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	2a 97       	sbiw	r28, 0x0a	; 10
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
    DDRB |= (1<<DDB5);
 32e:	84 b1       	in	r24, 0x04	; 4
 330:	80 62       	ori	r24, 0x20	; 32
 332:	84 b9       	out	0x04, r24	; 4
	char sgn[] = "826433407";	//string to be printed
 334:	8a e0       	ldi	r24, 0x0A	; 10
 336:	e4 e1       	ldi	r30, 0x14	; 20
 338:	f1 e0       	ldi	r31, 0x01	; 1
 33a:	de 01       	movw	r26, r28
 33c:	11 96       	adiw	r26, 0x01	; 1
 33e:	01 90       	ld	r0, Z+
 340:	0d 92       	st	X+, r0
 342:	8a 95       	dec	r24
 344:	e1 f7       	brne	.-8      	; 0x33e <main+0x24>
    while (1) 
    {
		static uint8_t cnt = 0;	//forever loop counter
		uint16_t val = sgn[cnt];	//one char from sgn string of pos [cnt]
 346:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
 34a:	e1 e0       	ldi	r30, 0x01	; 1
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	ec 0f       	add	r30, r28
 350:	fd 1f       	adc	r31, r29
 352:	e2 0f       	add	r30, r18
 354:	f1 1d       	adc	r31, r1
 356:	80 81       	ld	r24, Z
 358:	90 e0       	ldi	r25, 0x00	; 0
		uint8_t nxt = sgn[++cnt];	//the following pos char 
 35a:	2f 5f       	subi	r18, 0xFF	; 255
 35c:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <__data_end>
 360:	e1 e0       	ldi	r30, 0x01	; 1
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ec 0f       	add	r30, r28
 366:	fd 1f       	adc	r31, r29
 368:	e2 0f       	add	r30, r18
 36a:	f1 1d       	adc	r31, r1
 36c:	10 81       	ld	r17, Z
		if(val >= 'a')
 36e:	81 36       	cpi	r24, 0x61	; 97
 370:	91 05       	cpc	r25, r1
 372:	08 f0       	brcs	.+2      	; 0x376 <main+0x5c>
			val -= ('a' - 'A');	//if lower case val then change to upper
 374:	80 97       	sbiw	r24, 0x20	; 32
		val = letter_val(val);//change to header file value
 376:	0e 94 96 00 	call	0x12c	; 0x12c <letter_val>
		space_dot_dash(val, nxt);//print the Morse code form of character val
 37a:	61 2f       	mov	r22, r17
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	0e 94 4e 01 	call	0x29c	; 0x29c <space_dot_dash>
		if(nxt == '\0')
 382:	11 11       	cpse	r17, r1
 384:	e0 cf       	rjmp	.-64     	; 0x346 <main+0x2c>
			cnt = 0;		//if string ended restart
 386:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
 38a:	dd cf       	rjmp	.-70     	; 0x346 <main+0x2c>

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
